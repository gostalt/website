{"componentChunkName":"component---src-templates-doc-js","path":"/packages/validate","result":{"data":{"markdownRemark":{"html":"<p>Validate provides an easy-to-use package for validating form\nvalues in Go. With it, you construct a ruleset, and use that\nruleset to ensure that an incoming request is satisfied.</p>\n<h2 id=\"usage\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Firstly, create a number of <code>Rule</code> items to check against. Each\nrule is made up of a parameter and a callback that is ran to\ndetermine if the Rule passes or not.</p>\n<p>Validate ships with a number of <a href=\"#validators\">built-in checks</a> that you can\nuse. For example, the <code>validate.Alpha</code> check:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">alphaForename <span class=\"token operator\">:=</span> validate<span class=\"token punctuation\">.</span>Rule<span class=\"token punctuation\">{</span>\n  Param<span class=\"token punctuation\">:</span> <span class=\"token string\">\"forename\"</span><span class=\"token punctuation\">,</span>\n  Check<span class=\"token punctuation\">:</span> validate<span class=\"token punctuation\">.</span>Alpha<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nalphaSurname <span class=\"token operator\">:=</span> validate<span class=\"token punctuation\">.</span>Rule<span class=\"token punctuation\">{</span>\n  Param<span class=\"token punctuation\">:</span> <span class=\"token string\">\"surname\"</span><span class=\"token punctuation\">,</span>\n  Check<span class=\"token punctuation\">:</span> validate<span class=\"token punctuation\">.</span>Alpha<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some validators utilise an <code>Options</code> map to provide dynamic checks:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">long <span class=\"token operator\">:=</span> validate<span class=\"token punctuation\">.</span>Rule<span class=\"token punctuation\">{</span>\n  Param<span class=\"token punctuation\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n  Check<span class=\"token punctuation\">:</span> validate<span class=\"token punctuation\">.</span>MaxLength<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Max length is 5 characters</span>\n  Options<span class=\"token punctuation\">:</span> validate<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">{</span><span class=\"token string\">\"length\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you have created all the validators you wish to use against\na request, call <code>validate.Check</code>. This accepts an http.Request\nand any number of rules, and returns a <code>Message</code> and an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">msgs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> validate<span class=\"token punctuation\">.</span><span class=\"token function\">Check</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> alphaForename<span class=\"token punctuation\">,</span> alphaSurname<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Depending on the number of rules for a given request, it may be\nmore succinct to create a variable or function that contains the\nrules, and use the spread operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">msgs<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> validate<span class=\"token punctuation\">.</span><span class=\"token function\">Check</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When creating validation as part of a JSON API, you can easily\ncreate a response using <code>validate.Response</code> (after checking\nwhether the validation as failed or not!). All you need to do\nis pass in a ResponseWriter and the failed validation messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">validate<span class=\"token punctuation\">.</span><span class=\"token function\">Respond</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> msgs<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span></code></pre></div>\n<p>This will automatically write a <code>422 Unprocessable Entity</code> header\nand a <code>Content-Type: application/json</code> header to the response.\nThen, the errors will be wrapped in an <code>error</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"forename\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"forename is required\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"forename must be longer than 5 characters\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"surname\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"surname must be longer than 5 characters\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"dob\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dob does not satisfy date format 2006-01-02\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, you can manually interact with the <code>msgs</code> variable\nthat is returned from the <code>Check</code> method if you need to carry\nout additional logic or handling of failed validation.</p>\n<h2 id=\"validators\"><a href=\"#validators\" aria-label=\"validators permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validators</h2>\n<p>Validate offers a number of built-in validators:</p>\n<h3 id=\"alpha\"><a href=\"#alpha\" aria-label=\"alpha permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alpha</h3>\n<p>Fails if the parameter contains any characters that aren't in the\nalphabet.</p>\n<h3 id=\"alphanumeric\"><a href=\"#alphanumeric\" aria-label=\"alphanumeric permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alphanumeric</h3>\n<p>Fails if the parameter contains any characters that are not an\nalphabet letter or a number.</p>\n<h3 id=\"boolean\"><a href=\"#boolean\" aria-label=\"boolean permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean</h3>\n<p>Fails if the parameter is not a boolean. Because request params\ndo not have a type, this validator fails if the value of the\nparam is not equal to <code>\"true\"</code>, <code>\"false\"</code>, <code>\"1\"</code> or <code>\"0\"</code>.</p>\n<h3 id=\"date\"><a href=\"#date\" aria-label=\"date permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date</h3>\n<p>Fails if the parameter is not a date. This validator uses the\nbuilt-in Go date formats to check if the passed value is a date.\nYou can also pass a slice of strings as a <code>formats</code> key in the\nOptions struct.</p>\n<p>Because this CheckFunc compares the given value against each of\nGo's built-in date formats, it can be computationally expensive.\nIf you <strong>know</strong> the format that the date will be in, you should\nuse the <code>DateFormat</code> CheckFunc.</p>\n<h3 id=\"dateformat\"><a href=\"#dateformat\" aria-label=\"dateformat permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DateFormat</h3>\n<p>Fails if the parameter does not matched the <code>format</code> key's value\npassed in the Options struct.</p>\n<h3 id=\"email\"><a href=\"#email\" aria-label=\"email permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Email</h3>\n<p>Fails if the parameter is not an email address.</p>\n<h4 id=\"mxemail\"><a href=\"#mxemail\" aria-label=\"mxemail permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MXEmail</h4>\n<p>Fails if the parameter is not an email address. This validator\nfirstly uses the <code>Email</code> validator to determine if the email\naddress matches a pattern, but then also looks up the MX records\nof the email domain to more accurately determine if an email\naddress exists.</p>\n<h3 id=\"integer\"><a href=\"#integer\" aria-label=\"integer permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integer</h3>\n<p>Fails if the parameter is not an integer. Uses the regex <code>^[0-9]+</code>\nto determine a pass.</p>\n<h3 id=\"maxlength\"><a href=\"#maxlength\" aria-label=\"maxlength permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MaxLength</h3>\n<p>Fails if the length of the parameter (number of characters) is\ngreater than the <code>length</code> value passed to the Options struct.</p>\n<h3 id=\"minlength\"><a href=\"#minlength\" aria-label=\"minlength permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MinLength</h3>\n<p>Fails if the length of the parameter (number of characters) is\nless than the <code>length</code> value passed to the Options struct.</p>\n<h3 id=\"notregex\"><a href=\"#notregex\" aria-label=\"notregex permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NotRegex</h3>\n<p>Fails if the parameter is satisfied by the regex <code>pattern</code> passed\nto the Options struct.</p>\n<h3 id=\"regex\"><a href=\"#regex\" aria-label=\"regex permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regex</h3>\n<p>Fails if the parameter does not satisfy the regex <code>pattern</code> passed\nto the Options struct.</p>\n<h3 id=\"required\"><a href=\"#required\" aria-label=\"required permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Required</h3>\n<p>Fails if the parameter does not exist in the request.</p>\n<h3 id=\"rfc3339\"><a href=\"#rfc3339\" aria-label=\"rfc3339 permalink\" class=\"heading-anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RFC3339</h3>\n<p>Fails if the value passed does not match the date pattern defined\nby RFC3339.</p>\n<p>However, you are free to create your own rules by passing a func\nto the Check field. The func must be compatible with <code>CheckFunc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> CheckFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Options<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></code></pre></div>\n<p>Inside the function, you can use the http.Request to extract any\nparameters you wish to check—the second argument to the function\nis the parameter, so you can retrieve it dynamically from the\nrequest:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Below is the built-in Integer validator.</span>\n<span class=\"token keyword\">var</span> Integer CheckFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> param <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> Options<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tfail<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">MatchString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`[^0-9]+`</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> fail <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s must be an integer\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can use the Options map in your own custom validators using\nthe third argument to the CheckFunc:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Below is the built-in MaxLength validator.</span>\n<span class=\"token keyword\">var</span> MaxLength CheckFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> param <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> o Options<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\tvalue <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span>\n\n\tmax<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> o<span class=\"token punctuation\">[</span><span class=\"token string\">\"length\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\tmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> max <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s cannot be longer than %d characters\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"path":"/packages/validate","title":"Validate"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}